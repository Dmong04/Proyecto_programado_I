// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Provider.sql

package dto

import (
	"context"
	"database/sql"
)

const createProvider = `-- name: CreateProvider :execresult
INSERT INTO Proveedor (nombre, descrip)
VALUES (?, ?)
`

type CreateProviderParams struct {
	Nombre  string `json:"nombre"`
	Descrip string `json:"descrip"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProvider, arg.Nombre, arg.Descrip)
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM Proveedor WHERE idProveedor = ?
`

func (q *Queries) DeleteProvider(ctx context.Context, idproveedor int32) error {
	_, err := q.db.ExecContext(ctx, deleteProvider, idproveedor)
	return err
}

const deleteProviderByName = `-- name: DeleteProviderByName :exec
DELETE FROM Proveedor WHERE nombre = ?
`

func (q *Queries) DeleteProviderByName(ctx context.Context, nombre string) error {
	_, err := q.db.ExecContext(ctx, deleteProviderByName, nombre)
	return err
}

const getAllProviders = `-- name: GetAllProviders :many
SELECT idproveedor, nombre, descrip FROM Proveedor
`

func (q *Queries) GetAllProviders(ctx context.Context) ([]Proveedor, error) {
	rows, err := q.db.QueryContext(ctx, getAllProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Proveedor
	for rows.Next() {
		var i Proveedor
		if err := rows.Scan(&i.Idproveedor, &i.Nombre, &i.Descrip); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviderById = `-- name: GetProviderById :one
SELECT idproveedor, nombre, descrip FROM Proveedor WHERE idProveedor = ? LIMIT 1
`

func (q *Queries) GetProviderById(ctx context.Context, idproveedor int32) (Proveedor, error) {
	row := q.db.QueryRowContext(ctx, getProviderById, idproveedor)
	var i Proveedor
	err := row.Scan(&i.Idproveedor, &i.Nombre, &i.Descrip)
	return i, err
}

const getProviderByName = `-- name: GetProviderByName :one
SELECT idproveedor, nombre, descrip FROM Proveedor WHERE nombre = ? LIMIT 1
`

func (q *Queries) GetProviderByName(ctx context.Context, nombre string) (Proveedor, error) {
	row := q.db.QueryRowContext(ctx, getProviderByName, nombre)
	var i Proveedor
	err := row.Scan(&i.Idproveedor, &i.Nombre, &i.Descrip)
	return i, err
}

const updateProvider = `-- name: UpdateProvider :exec
UPDATE Proveedor
SET nombre = ?, descrip = ?
WHERE idProveedor = ?
`

type UpdateProviderParams struct {
	Nombre      string `json:"nombre"`
	Descrip     string `json:"descrip"`
	Idproveedor int32  `json:"idproveedor"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) error {
	_, err := q.db.ExecContext(ctx, updateProvider, arg.Nombre, arg.Descrip, arg.Idproveedor)
	return err
}

const updateProviderByName = `-- name: UpdateProviderByName :exec
UPDATE Proveedor
SET nombre = ?, descrip = ?
WHERE nombre = ?
`

type UpdateProviderByNameParams struct {
	Nombre   string `json:"nombre"`
	Descrip  string `json:"descrip"`
	Nombre_2 string `json:"nombre_2"`
}

func (q *Queries) UpdateProviderByName(ctx context.Context, arg UpdateProviderByNameParams) error {
	_, err := q.db.ExecContext(ctx, updateProviderByName, arg.Nombre_2, arg.Descrip, arg.Nombre)
	return err
}
