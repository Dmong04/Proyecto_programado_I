// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: User.sql

package dto

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO Usuario (correo, usuario, contraseña, idAdministrador, idCliente, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, now(), now())
`

type CreateUserParams struct {
	Correo          string        `json:"correo"`
	Usuario         string        `json:"usuario"`
	Contraseña      string        `json:"contraseña"`
	Idadministrador sql.NullInt32 `json:"idadministrador"`
	Idcliente       sql.NullInt32 `json:"idcliente"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Correo,
		arg.Usuario,
		arg.Contraseña,
		arg.Idadministrador,
		arg.Idcliente,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM Usuario WHERE idUsuario = ?
`

func (q *Queries) DeleteUser(ctx context.Context, idusuario int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, idusuario)
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT idUsuario, correo, usuario, role FROM Usuario
`

type GetAllUsersRow struct {
	Idusuario int32  `json:"idusuario"`
	Correo    string `json:"correo"`
	Usuario   string `json:"usuario"`
	Role      string `json:"role"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.Idusuario,
			&i.Correo,
			&i.Usuario,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT idusuario, correo, usuario, contraseña, role, idadministrador, idcliente, created_at, updated_at, remember_token FROM Usuario WHERE correo=? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, correo string) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, correo)
	var i Usuario
	err := row.Scan(
		&i.Idusuario,
		&i.Correo,
		&i.Usuario,
		&i.Contraseña,
		&i.Role,
		&i.Idadministrador,
		&i.Idcliente,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RememberToken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT idUsuario AS id, usuario AS user, correo AS email, contraseña AS password, role
FROM Usuario
WHERE idUsuario = ? LIMIT 1
`

type GetUserByIdRow struct {
	ID       int32  `json:"id"`
	User     string `json:"user"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) GetUserById(ctx context.Context, idusuario int32) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, idusuario)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT idUsuario AS id, usuario AS user, correo AS email, contraseña AS password, role
FROM Usuario
WHERE usuario = ? LIMIT 1
`

type GetUserByUserNameRow struct {
	ID       int32  `json:"id"`
	User     string `json:"user"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) GetUserByUserName(ctx context.Context, usuario string) (GetUserByUserNameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, usuario)
	var i GetUserByUserNameRow
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE Usuario
SET correo = ?, usuario = ?
WHERE idUsuario = ?
`

type UpdateUserParams struct {
	Correo    string `json:"correo"`
	Usuario   string `json:"usuario"`
	Idusuario int32  `json:"idusuario"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Correo, arg.Usuario, arg.Idusuario)
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE Usuario SET contraseña = ? 
WHERE idUsuario = ?
`

type UpdateUserPasswordParams struct {
	Contraseña string `json:"contraseña"`
	Idusuario  int32  `json:"idusuario"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserPassword, arg.Contraseña, arg.Idusuario)
}
