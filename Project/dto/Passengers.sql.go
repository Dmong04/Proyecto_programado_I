// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Passengers.sql

package dto

import (
	"context"
	"database/sql"
)

const createPassenger = `-- name: CreatePassenger :execresult
INSERT INTO Pasajeros (nombre, edad, idDetalle)
VALUES (?, ?, ?)
`

type CreatePassengerParams struct {
	Nombre    string `json:"nombre"`
	Edad      int32  `json:"edad"`
	Iddetalle int32  `json:"iddetalle"`
}

func (q *Queries) CreatePassenger(ctx context.Context, arg CreatePassengerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPassenger, arg.Nombre, arg.Edad, arg.Iddetalle)
}

const deletePassenger = `-- name: DeletePassenger :exec
DELETE FROM Pasajeros WHERE idPasajeros = ?
`

func (q *Queries) DeletePassenger(ctx context.Context, idpasajeros int32) error {
	_, err := q.db.ExecContext(ctx, deletePassenger, idpasajeros)
	return err
}

const getAllPassengers = `-- name: GetAllPassengers :many
SELECT idpasajeros, nombre, edad, iddetalle FROM Pasajeros
`

func (q *Queries) GetAllPassengers(ctx context.Context) ([]Pasajero, error) {
	rows, err := q.db.QueryContext(ctx, getAllPassengers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pasajero
	for rows.Next() {
		var i Pasajero
		if err := rows.Scan(
			&i.Idpasajeros,
			&i.Nombre,
			&i.Edad,
			&i.Iddetalle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassengersByDetailID = `-- name: GetPassengersByDetailID :many
SELECT idpasajeros, nombre, edad, iddetalle FROM Pasajeros WHERE idDetalle = ?
`

func (q *Queries) GetPassengersByDetailID(ctx context.Context, iddetalle int32) ([]Pasajero, error) {
	rows, err := q.db.QueryContext(ctx, getPassengersByDetailID, iddetalle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pasajero
	for rows.Next() {
		var i Pasajero
		if err := rows.Scan(
			&i.Idpasajeros,
			&i.Nombre,
			&i.Edad,
			&i.Iddetalle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassengersById = `-- name: GetPassengersById :one
SELECT idpasajeros, nombre, edad, iddetalle FROM Pasajeros WHERE idPasajeros = ? LIMIT 1
`

func (q *Queries) GetPassengersById(ctx context.Context, idpasajeros int32) (Pasajero, error) {
	row := q.db.QueryRowContext(ctx, getPassengersById, idpasajeros)
	var i Pasajero
	err := row.Scan(
		&i.Idpasajeros,
		&i.Nombre,
		&i.Edad,
		&i.Iddetalle,
	)
	return i, err
}

const getPassengersByName = `-- name: GetPassengersByName :one
SELECT idpasajeros, nombre, edad, iddetalle FROM Pasajeros WHERE nombre = ? LIMIT 1
`

func (q *Queries) GetPassengersByName(ctx context.Context, nombre string) (Pasajero, error) {
	row := q.db.QueryRowContext(ctx, getPassengersByName, nombre)
	var i Pasajero
	err := row.Scan(
		&i.Idpasajeros,
		&i.Nombre,
		&i.Edad,
		&i.Iddetalle,
	)
	return i, err
}

const updatePassenger = `-- name: UpdatePassenger :exec
UPDATE Pasajeros
SET nombre = ?, edad = ?, idDetalle = ?
WHERE idPasajeros = ?
`

type UpdatePassengerParams struct {
	Nombre      string `json:"nombre"`
	Edad        int32  `json:"edad"`
	Iddetalle   int32  `json:"iddetalle"`
	Idpasajeros int32  `json:"idpasajeros"`
}

func (q *Queries) UpdatePassenger(ctx context.Context, arg UpdatePassengerParams) error {
	_, err := q.db.ExecContext(ctx, updatePassenger,
		arg.Nombre,
		arg.Edad,
		arg.Iddetalle,
		arg.Idpasajeros,
	)
	return err
}
