// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ClientPhones.sql

package dto

import (
	"context"
	"database/sql"
)

const createClientPhones = `-- name: CreateClientPhones :execresult
INSERT INTO telefonoClientes (numero, tipo, idCliente)
VALUES (?, ?, ?)
`

type CreateClientPhonesParams struct {
	Numero    string `json:"numero"`
	Tipo      string `json:"tipo"`
	Idcliente int32  `json:"idcliente"`
}

func (q *Queries) CreateClientPhones(ctx context.Context, arg CreateClientPhonesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createClientPhones, arg.Numero, arg.Tipo, arg.Idcliente)
}

const deleteClientPhones = `-- name: DeleteClientPhones :exec
DELETE FROM telefonoClientes WHERE idtelefonoClientes = ?
`

func (q *Queries) DeleteClientPhones(ctx context.Context, idtelefonoclientes int32) error {
	_, err := q.db.ExecContext(ctx, deleteClientPhones, idtelefonoclientes)
	return err
}

const getAllClientPhones = `-- name: GetAllClientPhones :many
SELECT idtelefonoclientes, numero, tipo, idcliente FROM telefonoClientes
`

func (q *Queries) GetAllClientPhones(ctx context.Context) ([]Telefonocliente, error) {
	rows, err := q.db.QueryContext(ctx, getAllClientPhones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Telefonocliente
	for rows.Next() {
		var i Telefonocliente
		if err := rows.Scan(
			&i.Idtelefonoclientes,
			&i.Numero,
			&i.Tipo,
			&i.Idcliente,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientPhonesByClientID = `-- name: GetClientPhonesByClientID :many
SELECT idtelefonoclientes, numero, tipo, idcliente FROM telefonoClientes WHERE idCliente = ?
`

func (q *Queries) GetClientPhonesByClientID(ctx context.Context, idcliente int32) ([]Telefonocliente, error) {
	rows, err := q.db.QueryContext(ctx, getClientPhonesByClientID, idcliente)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Telefonocliente
	for rows.Next() {
		var i Telefonocliente
		if err := rows.Scan(
			&i.Idtelefonoclientes,
			&i.Numero,
			&i.Tipo,
			&i.Idcliente,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientPhonesById = `-- name: GetClientPhonesById :one
SELECT idtelefonoclientes, numero, tipo, idcliente FROM telefonoClientes WHERE idtelefonoClientes = ? LIMIT 1
`

func (q *Queries) GetClientPhonesById(ctx context.Context, idtelefonoclientes int32) (Telefonocliente, error) {
	row := q.db.QueryRowContext(ctx, getClientPhonesById, idtelefonoclientes)
	var i Telefonocliente
	err := row.Scan(
		&i.Idtelefonoclientes,
		&i.Numero,
		&i.Tipo,
		&i.Idcliente,
	)
	return i, err
}

const updateClientPhones = `-- name: UpdateClientPhones :exec
UPDATE telefonoClientes
SET numero = ?, tipo = ?
WHERE idtelefonoClientes = ?
`

type UpdateClientPhonesParams struct {
	Numero             string `json:"numero"`
	Tipo               string `json:"tipo"`
	Idtelefonoclientes int32  `json:"idtelefonoclientes"`
}

func (q *Queries) UpdateClientPhones(ctx context.Context, arg UpdateClientPhonesParams) error {
	_, err := q.db.ExecContext(ctx, updateClientPhones, arg.Numero, arg.Tipo, arg.Idtelefonoclientes)
	return err
}
