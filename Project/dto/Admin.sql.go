// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Admin.sql

package dto

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :execresult
INSERT INTO Administrador (nombre, correo, usuario, contraseña)
VALUES (?, ?, ?, ?)
`

type CreateAdminParams struct {
	Nombre     string `json:"nombre"`
	Correo     string `json:"correo"`
	Usuario    string `json:"usuario"`
	Contraseña string `json:"contraseña"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAdmin,
		arg.Nombre,
		arg.Correo,
		arg.Usuario,
		arg.Contraseña,
	)
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM Administrador WHERE idAdministrador = ?
`

func (q *Queries) DeleteAdmin(ctx context.Context, idadministrador int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, idadministrador)
	return err
}

const getAdminById = `-- name: GetAdminById :one
SELECT idadministrador, nombre, correo, usuario, contraseña FROM Administrador WHERE idAdministrador = ? LIMIT 1
`

func (q *Queries) GetAdminById(ctx context.Context, idadministrador int32) (Administrador, error) {
	row := q.db.QueryRowContext(ctx, getAdminById, idadministrador)
	var i Administrador
	err := row.Scan(
		&i.Idadministrador,
		&i.Nombre,
		&i.Correo,
		&i.Usuario,
		&i.Contraseña,
	)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT idadministrador, nombre, correo, usuario, contraseña FROM Administrador
`

func (q *Queries) GetAllAdmins(ctx context.Context) ([]Administrador, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Administrador
	for rows.Next() {
		var i Administrador
		if err := rows.Scan(
			&i.Idadministrador,
			&i.Nombre,
			&i.Correo,
			&i.Usuario,
			&i.Contraseña,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :exec
UPDATE Administrador
SET nombre = ?, correo = ?, usuario = ? WHERE idAdministrador = ?
`

type UpdateAdminParams struct {
	Nombre          string `json:"nombre"`
	Correo          string `json:"correo"`
	Usuario         string `json:"usuario"`
	Idadministrador int32  `json:"idadministrador"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateAdmin,
		arg.Nombre,
		arg.Correo,
		arg.Usuario,
		arg.Idadministrador,
	)
	return err
}

const updateAdminPassword = `-- name: UpdateAdminPassword :exec
UPDATE Administrador SET contraseña = ? 
WHERE idAdministrador = ?
`

type UpdateAdminPasswordParams struct {
	Contraseña      string `json:"contraseña"`
	Idadministrador int32  `json:"idadministrador"`
}

func (q *Queries) UpdateAdminPassword(ctx context.Context, arg UpdateAdminPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminPassword, arg.Contraseña, arg.Idadministrador)
	return err
}
