// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Reservation.sql

package dto

import (
	"context"
	"database/sql"
)

const createReservation = `-- name: CreateReservation :execresult
INSERT INTO reservas (idCliente, idAdministrador, idDetalle)
VALUES (?, ?, ?)
`

type CreateReservationParams struct {
	Idcliente       int32 `json:"idcliente"`
	Idadministrador int32 `json:"idadministrador"`
	Iddetalle       int32 `json:"iddetalle"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReservation, arg.Idcliente, arg.Idadministrador, arg.Iddetalle)
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservas WHERE idreservas = ?
`

func (q *Queries) DeleteReservation(ctx context.Context, idreservas int32) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, idreservas)
	return err
}

const getAllReservations = `-- name: GetAllReservations :many
SELECT idreservas, idcliente, idadministrador, iddetalle FROM reservas
`

func (q *Queries) GetAllReservations(ctx context.Context) ([]Reserva, error) {
	rows, err := q.db.QueryContext(ctx, getAllReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reserva
	for rows.Next() {
		var i Reserva
		if err := rows.Scan(
			&i.Idreservas,
			&i.Idcliente,
			&i.Idadministrador,
			&i.Iddetalle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservationsById = `-- name: GetReservationsById :one
SELECT idreservas, idcliente, idadministrador, iddetalle FROM reservas WHERE idreservas = ? LIMIT 1
`

func (q *Queries) GetReservationsById(ctx context.Context, idreservas int32) (Reserva, error) {
	row := q.db.QueryRowContext(ctx, getReservationsById, idreservas)
	var i Reserva
	err := row.Scan(
		&i.Idreservas,
		&i.Idcliente,
		&i.Idadministrador,
		&i.Iddetalle,
	)
	return i, err
}

const updateReservation = `-- name: UpdateReservation :exec
UPDATE reservas
SET idCliente = ?, idAdministrador = ?, idDetalle = ?
WHERE idreservas = ?
`

type UpdateReservationParams struct {
	Idcliente       int32 `json:"idcliente"`
	Idadministrador int32 `json:"idadministrador"`
	Iddetalle       int32 `json:"iddetalle"`
	Idreservas      int32 `json:"idreservas"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) error {
	_, err := q.db.ExecContext(ctx, updateReservation,
		arg.Idcliente,
		arg.Idadministrador,
		arg.Iddetalle,
		arg.Idreservas,
	)
	return err
}
