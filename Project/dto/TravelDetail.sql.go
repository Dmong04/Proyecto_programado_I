// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: TravelDetail.sql

package dto

import (
	"context"
	"database/sql"
	"time"
)

const createTravelDetail = `-- name: CreateTravelDetail :execresult
INSERT INTO detalleViaje (idProveedor, idViaje, fecha, hora)
VALUES (?, ?, ?, ?)
`

type CreateTravelDetailParams struct {
	Idproveedor sql.NullInt32 `json:"idproveedor"`
	Idviaje     int32         `json:"idviaje"`
	Fecha       time.Time     `json:"fecha"`
	Hora        time.Time     `json:"hora"`
}

func (q *Queries) CreateTravelDetail(ctx context.Context, arg CreateTravelDetailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTravelDetail,
		arg.Idproveedor,
		arg.Idviaje,
		arg.Fecha,
		arg.Hora,
	)
}

const deleteTravelDetail = `-- name: DeleteTravelDetail :exec
DELETE FROM detalleViaje WHERE idDetalleViaje = ?
`

func (q *Queries) DeleteTravelDetail(ctx context.Context, iddetalleviaje int32) error {
	_, err := q.db.ExecContext(ctx, deleteTravelDetail, iddetalleviaje)
	return err
}

const getAllTravelDetails = `-- name: GetAllTravelDetails :many
SELECT iddetalleviaje, fecha, hora, idproveedor, idviaje FROM detalleViaje
`

func (q *Queries) GetAllTravelDetails(ctx context.Context) ([]Detalleviaje, error) {
	rows, err := q.db.QueryContext(ctx, getAllTravelDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Detalleviaje
	for rows.Next() {
		var i Detalleviaje
		if err := rows.Scan(
			&i.Iddetalleviaje,
			&i.Fecha,
			&i.Hora,
			&i.Idproveedor,
			&i.Idviaje,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelDetailById = `-- name: GetTravelDetailById :one
SELECT iddetalleviaje, fecha, hora, idproveedor, idviaje FROM detalleViaje WHERE idDetalleViaje = ? LIMIT 1
`

func (q *Queries) GetTravelDetailById(ctx context.Context, iddetalleviaje int32) (Detalleviaje, error) {
	row := q.db.QueryRowContext(ctx, getTravelDetailById, iddetalleviaje)
	var i Detalleviaje
	err := row.Scan(
		&i.Iddetalleviaje,
		&i.Fecha,
		&i.Hora,
		&i.Idproveedor,
		&i.Idviaje,
	)
	return i, err
}

const updateTravelDetail = `-- name: UpdateTravelDetail :exec
UPDATE detalleViaje
SET idProveedor = ?, idViaje = ?, fecha = ?, hora = ?
WHERE idDetalleViaje = ?
`

type UpdateTravelDetailParams struct {
	Idproveedor    sql.NullInt32 `json:"idproveedor"`
	Idviaje        int32         `json:"idviaje"`
	Fecha          time.Time     `json:"fecha"`
	Hora           time.Time     `json:"hora"`
	Iddetalleviaje int32         `json:"iddetalleviaje"`
}

func (q *Queries) UpdateTravelDetail(ctx context.Context, arg UpdateTravelDetailParams) error {
	_, err := q.db.ExecContext(ctx, updateTravelDetail,
		arg.Idproveedor,
		arg.Idviaje,
		arg.Fecha,
		arg.Hora,
		arg.Iddetalleviaje,
	)
	return err
}
