// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Travel.sql

package dto

import (
	"context"
	"database/sql"
)

const createTravel = `-- name: CreateTravel :execresult
INSERT INTO Viaje (tipoViaje, descripcion)
VALUES (?, ?)
`

type CreateTravelParams struct {
	Tipoviaje   string `json:"tipoviaje"`
	Descripcion string `json:"descripcion"`
}

func (q *Queries) CreateTravel(ctx context.Context, arg CreateTravelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTravel, arg.Tipoviaje, arg.Descripcion)
}

const deleteTravel = `-- name: DeleteTravel :exec
DELETE FROM Viaje WHERE idViaje = ?
`

func (q *Queries) DeleteTravel(ctx context.Context, idviaje int32) error {
	_, err := q.db.ExecContext(ctx, deleteTravel, idviaje)
	return err
}

const getAllTravels = `-- name: GetAllTravels :many
SELECT idviaje, tipoviaje, descripcion FROM Viaje
`

func (q *Queries) GetAllTravels(ctx context.Context) ([]Viaje, error) {
	rows, err := q.db.QueryContext(ctx, getAllTravels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Viaje
	for rows.Next() {
		var i Viaje
		if err := rows.Scan(&i.Idviaje, &i.Tipoviaje, &i.Descripcion); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelById = `-- name: GetTravelById :one
SELECT idviaje, tipoviaje, descripcion FROM Viaje WHERE idViaje = ? LIMIT 1
`

func (q *Queries) GetTravelById(ctx context.Context, idviaje int32) (Viaje, error) {
	row := q.db.QueryRowContext(ctx, getTravelById, idviaje)
	var i Viaje
	err := row.Scan(&i.Idviaje, &i.Tipoviaje, &i.Descripcion)
	return i, err
}

const updateTravel = `-- name: UpdateTravel :exec
UPDATE Viaje
SET tipoViaje = ?, descripcion = ?
WHERE idViaje = ?
`

type UpdateTravelParams struct {
	Tipoviaje   string `json:"tipoviaje"`
	Descripcion string `json:"descripcion"`
	Idviaje     int32  `json:"idviaje"`
}

func (q *Queries) UpdateTravel(ctx context.Context, arg UpdateTravelParams) error {
	_, err := q.db.ExecContext(ctx, updateTravel, arg.Tipoviaje, arg.Descripcion, arg.Idviaje)
	return err
}
