// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: History.sql

package dto

import (
	"context"
	"database/sql"
)

const createHistory = `-- name: CreateHistory :execresult
INSERT INTO Historial (descrip, idCliente, idReserva)
VALUES (?, ?, ?)
`

type CreateHistoryParams struct {
	Descrip   string `json:"descrip"`
	Idcliente int32  `json:"idcliente"`
	Idreserva int32  `json:"idreserva"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createHistory, arg.Descrip, arg.Idcliente, arg.Idreserva)
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE FROM Historial WHERE idHistorial = ?
`

func (q *Queries) DeleteHistory(ctx context.Context, idhistorial int32) error {
	_, err := q.db.ExecContext(ctx, deleteHistory, idhistorial)
	return err
}

const getAllHistories = `-- name: GetAllHistories :many
SELECT idhistorial, descrip, idcliente, idreserva FROM Historial
`

func (q *Queries) GetAllHistories(ctx context.Context) ([]Historial, error) {
	rows, err := q.db.QueryContext(ctx, getAllHistories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Historial
	for rows.Next() {
		var i Historial
		if err := rows.Scan(
			&i.Idhistorial,
			&i.Descrip,
			&i.Idcliente,
			&i.Idreserva,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistoryById = `-- name: GetHistoryById :one
SELECT idhistorial, descrip, idcliente, idreserva FROM Historial WHERE idHistorial = ? LIMIT 1
`

func (q *Queries) GetHistoryById(ctx context.Context, idhistorial int32) (Historial, error) {
	row := q.db.QueryRowContext(ctx, getHistoryById, idhistorial)
	var i Historial
	err := row.Scan(
		&i.Idhistorial,
		&i.Descrip,
		&i.Idcliente,
		&i.Idreserva,
	)
	return i, err
}

const updateHistory = `-- name: UpdateHistory :exec
UPDATE Historial
SET descrip = ?, idCliente = ?, idReserva = ?
WHERE idHistorial = ?
`

type UpdateHistoryParams struct {
	Descrip     string `json:"descrip"`
	Idcliente   int32  `json:"idcliente"`
	Idreserva   int32  `json:"idreserva"`
	Idhistorial int32  `json:"idhistorial"`
}

func (q *Queries) UpdateHistory(ctx context.Context, arg UpdateHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateHistory,
		arg.Descrip,
		arg.Idcliente,
		arg.Idreserva,
		arg.Idhistorial,
	)
	return err
}
